/*
      placeSticker: (cellId, stickerPermanence) => {
        const cell = utils.findCellByCellId(cellId);
        const cellElement = $(cell.element[0]);
        const cellRect = cellElement[0].getBoundingClientRect();
        if (graffiti.stickers[stickerPermanence][cellId] !== undefined) {
          return cellRect;
        }
        // Note that I inline all these styles because to include them from a stylesheet causes rendering jumps and screwups.
        $('<div class="graffiti-sticker-outer" ' +
          'style="width:' + parseInt(cellRect.width) + 'px;' +
          'height:' + parseInt(cellRect.height) + 'px;' +
          'position:absolute;left:0;top:0;">' +
          '</div>').appendTo(cellElement);

        graffiti.stickerOuter = $('.graffiti-sticker-outer');

        const cellRectHeight = parseInt(cellRect.height);
        let innerHtml = [];
        const symmetricCurlyBraces = sticker.makeSymmetricCurlyBraces(10,0,200,cellRectHeight);
        innerHtml.push(symmetricCurlyBraces);

        const leftCurlyBrace = sticker.makeLeftCurlyBrace(250,0,cellRectHeight);
        innerHtml.push(leftCurlyBrace);

        const rightCurlyBrace = sticker.makeRightCurlyBrace(450,0,cellRectHeight);
        innerHtml.push(rightCurlyBrace);

        const checkMark = sticker.makeCheckmark(300,0,cellRectHeight,cellRectHeight);
        innerHtml.push(checkMark);

        const xWrong = sticker.makeX(0,0,cellRectHeight);
        innerHtml.push(xWrong);

        const rightTriangle = sticker.makeRightTriangle({x: 500,y:0,width:cellRectHeight * 2,height:cellRectHeight * 2});
        innerHtml.push(rightTriangle);
        
        const isocelesTriangle = sticker.makeIsocelesTriangle({x: 550,y: 0, width: cellRectHeight*2,height: cellRectHeight*2});
        innerHtml.push(isocelesTriangle);

        const theta = sticker.makeTheta({x: 580,y: 0,width: cellRectHeight,height: cellRectHeight});
        innerHtml.push(theta);
        
        const sigma = sticker.makeSigma({x: 700, y:0, width: cellRectHeight, height: cellRectHeight});
        innerHtml.push(sigma);

        const rectangle = sticker.makeRectangle({x: 800, y:0, width: cellRectHeight, height: cellRectHeight, dashed:true, color:'orange'});
        innerHtml.push(rectangle);

        const topBracket = sticker.makeTopBracket({x: 900, y:0, width: 50, height: 10});
        innerHtml.push(topBracket);

        const bottomBracket = sticker.makeBottomBracket({x: 951, y:0, width: 50, height: 10});
        innerHtml.push(bottomBracket);
        
        const leftBracket = sticker.makeLeftBracket({x: 1002, y:0, width: 5, height: cellRectHeight});
        innerHtml.push(leftBracket);

        const rightBracket = sticker.makeRightBracket({x: 1010, y:0, width: 5, height: cellRectHeight});
        innerHtml.push(rightBracket);
        
        const star = sticker.makeStar({x: 1100, y:10, width: 50, height: 50, color: 'gold', strokeWidth:2});
        innerHtml.push(star);

        const lineWithArrow = sticker.makeLine({x: 0, y:20, width: 50, height: 50, color: 'blue', strokeWidth:2, arrowAtEnd:true, dashed:true});
        innerHtml.push(lineWithArrow);

        const smiley = sticker.makeSmiley({x: 0, y:30, width: 20, height: 20, color: 'green', strokeWidth:1});
        innerHtml.push(smiley);

        const frowney = sticker.makeFrowney({x: 50, y:30, width: 20, height: 20, color: 'red', strokeWidth:1});
        innerHtml.push(frowney);

        const thumbsUp = sticker.makeThumbsUp({x: 80, y:130, width: 50, height: 50, color: 'grey', strokeWidth:1});
        innerHtml.push(thumbsUp);
        const thumbsDown = sticker.makeThumbsDown({x: 120, y:130, width: 50, height: 50, color: 'grey', strokeWidth:1});
        innerHtml.push(thumbsDown);
        
        graffiti.stickerOuter[0].innerHTML = innerHtml.join('');
        
      },
*/



-----------------------------------



var regex1 = RegExp('foo*','g');
var str1 = 'table football, foosball';
var array1;

while ((array1 = regex1.exec(str1)) !== null) {
  console.log(`Found ${array1[0]}. Next starts at ${regex1.lastIndex}.`);
  // expected output: "Found foo. Next starts at 9."
  // expected output: "Found foo. Next starts at 19."
}

gh = RegExp('<span class="graffiti-highlight" id="graffiti-([^"]+)">(.*?)</span>','g')
while ((array1 = gh.exec(gg)) !== null) { console.log(array1); }


/*
                if (cell
                  // https://stackoverflow.com/questions/1335252/how-can-i-get-the-dom-element-which-contains-the-current-selection
                  let parentElem, selection, range, ranges, savedRange;
                  if (document.selection) {
                    // IE family
                    selection = document.selection;
                    range = selection.createRange();
                    parentElem = range.parentElement();
                  } else {
                    // Sane browsers
                    ranges = window.getSelection();
                    if (ranges.rangeCount > 0) {
                      parentElem = ranges.getRangeAt(0).startContainer.parentNode;
                      savedRange = ranges.getRangeAt(0).cloneRange();
                    }
                  }
                  const cellDOM = $(parentElem).parents('.cell');
                  let cellId;
                  if (cellDOM.length > 0) {
                    cellId = cellDOM.attr('graffiti-cell-id');
                    if (cellId !== undefined) {
                      const cell = utils.findCellByCellId(cellId);
                      if (cell.cell_type === 'markdown') {
                        console.log('Markdown selection changed:', cellId, ranges);
                setTimeout(() => {
                  if (window.getSelection) {
                    const winSelection = window.getSelection();
                    winSelection.removeAllRanges();
//                    winSelection.addRange(savedRange);
                    console.log('savedRange:', savedRange);
                  } else if (document.selection) {
                    var textRange = document.body.createTextRange();
                    textRange.moveToElementText(element);
                    textRange.select();
                  }
                  
                }, 3000);
              } else {
                if ($(parentElem).parents('.output_area').length > 0) {
                  console.log('Code cell output area selection changed:', cellId, ranges);
                }
              }
            }
          }
        });
*/



"autonomousgpu/view6a0900b6",
  "autonomousgpu/viewHJeftIbWrX",
  "gradedjupyter/labr1x1UMGNQm",
  "jupyter/view0a174b4c",
  "jupyter/view24d3ba7f",
  "jupyter/view305b1af9",
  "jupyter/view3f484599",
  "jupyter/view86e13931",
  "jupyter/viewa8d052f8"
  


https://udacity.zendesk.com/agent/tickets/890416
https://udacity.zendesk.com/agent/tickets/890316
https://udacity.zendesk.com/agent/tickets/890219
https://udacity.zendesk.com/agent/tickets/890251
